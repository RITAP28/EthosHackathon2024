generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PGADMIN_URL")
}

enum Role {
  USER
  ADMIN
}

enum GroupRole {
  MEMBER
  ADMIN
}

model User {
  id                     Int       @id @unique @default(autoincrement())
  name                   String
  email                  String    @unique
  password               String
  isAuthenticated        Boolean   @default(false)
  role                   Role      @default(USER)
  createdAt              DateTime  @default(now())
  Session                Session[]
  memberships            Member[]
  ownedGroups            Group[]   @relation("GroupOwner")
  latestTextSentByGroups Group[]   @relation("LatestTextSentBy")
  Group                  Group[]   @relation("UserRelation")
}

model Session {
  sessionId             Int      @id @default(autoincrement())
  userId                Int      @unique
  refreshToken          String   @unique
  refreshTokenExpiresAt BigInt
  createdAt             DateTime @default(now())
  user                  User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Chat {
  chatId        Int       @id @default(autoincrement())
  senderEmail   String
  receiverEmail String
  textMetadata  String
  sentAt        DateTime  @default(now())
  receivedAt    DateTime?
  isDelivered   Boolean   @default(false)
  isRead        Boolean   @default(false)
}

model ChatPartners {
  id               Int       @id @unique @default(autoincrement())
  senderId         Int
  senderName       String
  senderEmail      String
  chatPartnerId    Int
  chatPartnerName  String
  chatPartnerEmail String
  latestChat       String?
  startedAt        DateTime  @default(now())
  updatedAt        DateTime?

  @@unique([senderEmail, chatPartnerEmail])
}

model Group {
  id                 Int       @id @unique @default(autoincrement())
  name               String
  description        String?
  totalMembers       Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  members            Member[]
  latestText         String?
  latestTextSentAt   DateTime?
  latestTextSentBy   User?     @relation(name: "LatestTextSentBy", fields: [latestTextSentById], references: [id])
  latestTextSentById Int?
  owner              User?     @relation(name: "GroupOwner", fields: [ownerId], references: [id])
  ownerId            Int?
  User               User?     @relation(name: "UserRelation", fields: [userId], references: [id])
  userId             Int?

  @@unique([id, name])
}

model Member {
  id       Int       @id @default(autoincrement())
  name     String
  email    String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  // User relationship
  user   User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId Int

  // Group relationship
  Group   Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int?

  @@unique([userId, groupId])
}

model GroupChat {
  id           Int      @id @unique @default(autoincrement())
  groupId      Int
  groupName    String
  senderId     Int
  senderName   String
  senderEmail  String
  textMetadata String
  sentAt       DateTime @default(now())
  isDelivered  Boolean  @default(false)
}

model Notifications {
  id               Int       @id @unique @default(autoincrement())
  receiverId       Int
  receiverEmail    String
  senderEmail      String
  title            String
  message          String
  isGroup          Boolean   @default(false)
  groupId          Int?
  groupName        String?
  createdAt        DateTime  @default(now())
  receivedAt       DateTime? // Nullable field, will be null at creation time
  isRead           Boolean   @default(false)
  notificationType String

  @@unique([receiverEmail, senderEmail, id])
}
