generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PGADMIN_URL")
}

enum Role {
  USER
  ADMIN
}

enum GroupRole {
  MEMBER
  ADMIN
}

model User {
  id              Int       @id @unique @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  isAuthenticated Boolean   @default(false)
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  Session         Session[]
  Members         Members[]
}

model Session {
  sessionId             Int      @id @default(autoincrement())
  userId                Int      @unique
  refreshToken          String   @unique
  refreshTokenExpiresAt BigInt
  createdAt             DateTime @default(now())
  user                  User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Chat {
  chatId        Int       @id @default(autoincrement())
  senderEmail   String
  receiverEmail String
  textMetadata  String
  sentAt        DateTime  @default(now())
  receivedAt    DateTime?
  isDelivered   Boolean   @default(false)
  isRead        Boolean   @default(false)
}

model ChatPartners {
  id               Int       @id @unique @default(autoincrement())
  senderId         Int
  senderName       String
  senderEmail      String
  chatPartnerId    Int
  chatPartnerName  String
  chatPartnerEmail String
  latestChat       String?
  startedAt        DateTime  @default(now())
  updatedAt        DateTime?

  @@unique([senderEmail, chatPartnerEmail])
}

model Group {
  id           Int       @id @unique @default(autoincrement())
  name         String
  description  String?
  membersEmail String[]
  totalMembers Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  Members      Members[]

  @@unique([id, name])
}

model Members {
  userId    Int
  name      String
  email     String
  groupId   Int
  groupName String
  groupRole GroupRole @default(MEMBER)
  group     Group     @relation(references: [id, name], fields: [groupId, groupName], onDelete: Cascade)
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupChat {
  id           Int      @id @unique @default(autoincrement())
  groupId      Int
  groupName    String
  senderId     Int
  senderName   String
  senderEmail  String
  textMetadata String
  sentAt       DateTime @default(now())
  isDelivered  Boolean  @default(false)
}
